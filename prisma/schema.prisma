// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Account {
  id                 String   @id @default(cuid())
  userId             String       
  type               String
  provider           String
  providerAccountId  String    
  refreshToken       String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  sessionState       String?
  user               User    @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@index([userId], name: "userId")
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  userId       String      
  sessionToken String   @unique 
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  credits       Int?        @default(10)

  accounts Account[]
  sessions Session[]
}

// relationships: Course has many units, a unit has many chapteres, and a chapter has many questions
model Course {
  id String @id @default(cuid())
  name String
  image String // image url
  units Unit[]
}

model Unit {
  id String @id @default(cuid())
  courseId String
  
  name String
  course Course @relation(fields:[courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id String @id @default(cuid())
  unitId String 

  name String
  youtubeSearchQuery String // query used for searching youtube video
  videoId String? // link of youtube video
  summary String? @db.VarChar(3000)
  unit Unit @relation(fields: [unitId], references: [id])
  question Question[]

  @@index([unitId], name: "unitId")
}

model Question{
   id String @id @default(cuid())
   chapterId String

   question String @db.VarChar(3000)
   answer String @db.VarChar(3000)
   options String @db.VarChar(3000)
   chapter Chapter @relation(fields: [chapterId], references: [id])

   @@index([chapterId], name:"chapterId")

}